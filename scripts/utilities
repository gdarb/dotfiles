#!/usr/bin/env fish

function set_bold -d "bold text if not in CI"
    if not_ci
        echo (set_color --bold) $argv
    else
        echo $argv
    end
end

function set_italics -d "italicise text if not in CI"
    if not_ci
        echo (set_color --italics) $argv
    else
        echo $argv
    end
end

function info
    echo (set_color yellow)(set_bold)"!"(set_color normal) $argv
end

function user
    echo (set_color blue)(set_bold)"?"(set_color normal) $argv
end

function success
    echo (set_color green)(set_bold)"✓"(set_color normal) $argv
end

function abort
    echo (set_color red)(set_bold)"✗"(set_color normal) $argv
    exit 1
end

function link_file -d "links a file keeping a backup" -a src target backup
    set -l backup_loc $backup/(basename $target)

    # set pretty strings for printing
    set -l src_string (set_color magenta)(set_italics)(string replace "$SRC/" "" "$src")(set_color normal)
    set -l target_string (set_color bryellow)(set_italics)(string replace "$HOME/" "~/" "$target")(set_color normal)
    set -l backup_string (set_color cyan)(set_italics)(string replace "$TMPDIR" '$TMPDIR/' "$backup_loc")(set_color normal)

    if test -e $target
        set newfile (readlink $target)
        if test "$newfile" = "$src"
            success "skipped $src_string"
            return
        else
            move_file $target $backup_loc
            and info "backed up $target_string to $backup_string"
            or abort "failed to backup $target to $backup_string"
        end
    end
    mkdir -p (dirname $target)
    and ln -sf $src $target
    and success "linked $src_string to $target_string"
    or abort "could not link $src_string to $target_string"
end

function move_file -d "moves a file to a directory" -a file directory
    mkdir -p (dirname $directory)
    mv $file $directory
end

function check_install -d "check if a program is installed" -a program
    if not type -q $program
        abort "$program is not installed"
    end
end

function not_ci -d "return 0 if not running in GitHub CI"
    if test "$CI" = "true"
        return 1
    else
        return 0
    end
end
